
=head1 NAME

Mojolicious::Guides::FAQ - Frequently Asked Questions

=head1 OVERVIEW

This document contains the most frequently asked questions about
L<Mojolicious> together with the right answers.

=head1 QUESTIONS

=head2 Does L<Mojolicious> run on Windows systems?

Sure it does!
Right now there are two different ways of running Perl on the Windows
platform.
One is C<Strawberry Perl> and the other is C<ActiveState Perl>.
Both are capable Perl distributions which are stable, mature and ready for
production.
But C<Strawberry Perl> is quite a bit better at dealing with the L<CPAN> and
especially XS based modules due to its remarkable toolchain.
With it you can even install modules straight from the source as you would do
on a Unix based machine.

=head2 Is it possible to run the builtin webserver on Windows?

It is!
The builtin webserver is great way to run your L<Mojolicious> web application
on any platform.
See L<Mojolicious::Guides::Cookbook> for more information about running and
deploying L<Mojolicious> applications.

Note that if you run your application with the C<--reload> option Windows
will lock your files.
A simple Windows editor like C<WordPad> will complain that the file has
already been opened by a different proccess.
More capable editors can handle this accordingly and force the change.

=head2 Whats the easiest way to install L<Mojolicious> on UNIX?

Quite possibly this oneliner.

    curl -L cpanmin.us | perl - http://latest.mojolicio.us

=head2 I think L<Mojolicious> is awesome, how can i support you guys?

Share your success story via blog or twitter, get more people hooked! :)

=head2 I think i have found a bug, what should i do now?

First make sure you are using the latest version of L<Mojolicious>, it is
quite likely that the bug has already been fixed.
If that doesn't help prepare a test case demonstrating the bug, you are not
expected to fix it yourself, but you'll have to make sure the developers can
replicate your problem.
Sending in your whole application generally does more harm than good, the
C<t> directory of this distribution has many good examples for how to do it
right.
Writing a test is usually the hardest part of fixing a bug, so the better
your test case the faster it can be fixed. ;)

Once thats done you can contact the developers via GitHub
(http://github.com/kraih/mojo), mailing list
(L<http://groups.google.com/group/mojolicious>) or IRC
(C<#mojo> on C<irc.perl.org>).

If you decide to fix the bug yourself make sure to also take a look at
L<Mojolicious::Guides::CodingGuidelines>.

=cut
